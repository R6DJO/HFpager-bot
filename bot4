#!/bin/python
# -*- coding: utf-8 -*-
import re
import telebot
import time
import subprocess
import os
from threading import Thread
from datetime import datetime, date
from config import token,chat_id,my_id,abonent_id

def bot_polling():
    print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} Bot polling is running')
    while True:
        try:
            bot.polling(interval=5)
        except Exception as ex:
            print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} Bot polling error: {ex}')


def hfpager_bot():
    print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager message parsing is running')
    while True:
        date = datetime.now()
        #msg_path = '/data/data/com.termux/files/home/storage/shared/Documents/HFpager/' + date.strftime("%Y-%m-%d") + '.MSG/'
        msg_path = '/storage/emulated/0/Documents/HFpager/' + date.strftime("%Y-%m-%d") + '.MSG/'
        now = time.time()
        if os.path.isdir(msg_path):
            try:
                for f in os.listdir(msg_path):
                    if os.stat(os.path.join(msg_path, f)).st_ctime > now - 5:
                        messg = open(msg_path + f, 'r', encoding='cp1251')
                        text=messg.read()
                        if re.match(r'\d{6}-RO-0.*_' + str(my_id) + '.TXT', f):
                            print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager private message received: {text}')
                            bot.send_message(chat_id = chat_id, text = f'Private message received: {text}')
                        elif re.match(r'\d{6}-RO-[2,3].*_' + str(my_id) + '.TXT', f):
                            print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager private message received and acknowledgment sent: {text}')
                            bot.send_message(chat_id = chat_id, text = f'Private message received and acknowledgment sent: {text}')
                        elif re.match(r'\d{6}-R',f):
                            print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager message intercepted: {text}')
                            bot.send_message(chat_id = chat_id, text = f'Message intercepted: {text}', disable_notification = True)
                        elif re.match(r'\d{6}-S[1-9]-\dP',f):
                            print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager message sent and acknowledgment received: {text}')
                            bot.send_message(chat_id = chat_id, text = f'Message sent and acknowledgment received: {text}', disable_notification = True)
                        elif re.match(r'\d{6}-S[1-9]-\dN',f):
                            print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager message sent and not acknowledgment received: {text}')
                            bot.send_message(chat_id = chat_id, text = f'Message sent and not acknowledgment received: {text}', disable_notification = True)
                        elif re.match(r'\d{6}-S[1-9]-\d0',f):
                            print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager message sent: {text}')
                            bot.send_message(chat_id = chat_id, text = f'Message sent: {text}', disable_notification = True)
            except Exception as ex:
                print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager send/receive message error: {ex}')
        time.sleep(5)

def send_pager(message, abonent_id):
    if re.match(r'^>(\d{1,5})',message):
        abonent_id = re.match(r'^>(\d{1,5})',message).group(1)
        message = re.split(r'((?<=^>)\d{1,}\s*)', message, maxsplit=1)[-1]
         #= mes[-1]
    else:
        return 1,1
    if re.match(r'^!',message):
        repeat = 1
        message = re.split(r'^!\s*', message, maxsplit=1)[-1]
    else:
        repeat = 0
    print(f'repeat:{repeat} message:{message}')
    print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} HFpager send to ID: {abonent_id} message: {message}')
    proc = subprocess.Popen(
        f'am start --user 0 -n ru.radial.nogg.hfpager/ru.radial.full.hfpager.MainActivity -a '
        f'"android.intent.action.SEND" --es "android.intent.extra.TEXT" "{message}" -t "text/plain" --ei '
        f'"android.intent.extra.INDEX" "{abonent_id}" --es "android.intent.extra.SUBJECT" "Flags:1,{repeat}"',#.format(message,abonent_id,repeat),
        stdout=subprocess.PIPE, shell=True)
    output = proc.stdout.read()
    return abonent_id,message


bot = telebot.TeleBot(token)

@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.reply_to(message, """Hi there, I am HFpager Bot.
I am forward message to/from HFpager ID:{}\n
Usage:\n
`blah blah blah` - send _blah blah blah_ to {}\n
`>123blah blah blah`
`>123 blah blah blah` - send _blah blah blah_ to _123_\n
`!blah blah blah`
`! blah blah blah` - repeat send until ACK\n
`>123 !blahblah`
`>123! blahblah`
`>123!blahblah`
`>123 ! blahblah` - ...""".format(my_id,abonent_id), parse_mode = 'markdown')


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    print(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} Bot receive message: {message.text}')
    id,text = send_pager(message.text, abonent_id)

if __name__ == "__main__":
    name = "WEB->HFpager"
    to_radio = Thread(target = bot_polling)
    to_web = Thread(target = hfpager_bot)
    to_radio.start()
    to_web.start()
    to_radio.join()
    to_web.join()
